[
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "pages",
    "expression": "value.replace(\"1 online resource (\",\"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column pages using expression value.replace(\"1 online resource (\",\"\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "pages",
    "expression": "value.replace(\") :\",\"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column pages using expression value.replace(\") :\",\"\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "pages",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column pages using expression value.trim()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "pages",
    "expression": "value.replace(/\\s+/,' ')",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column pages using expression value.replace(/\\s+/,' ')"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [
        {
          "type": "list",
          "name": "pages",
          "expression": "grel:value.contains(\"pages\")",
          "columnName": "pages",
          "invert": false,
          "omitBlank": false,
          "omitError": false,
          "selection": [
            {
              "v": {
                "v": true,
                "l": "true"
              }
            }
          ],
          "selectBlank": false,
          "selectError": false
        }
      ],
      "mode": "row-based"
    },
    "baseColumnName": "pages",
    "expression": "grel:value",
    "onError": "set-to-blank",
    "newColumnName": "page",
    "columnInsertIndex": 11,
    "description": "Create column page at index 11 based on column pages using expression grel:value"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [
        {
          "type": "list",
          "name": "pages",
          "expression": "grel:value.contains(\"pages\")",
          "columnName": "pages",
          "invert": false,
          "omitBlank": false,
          "omitError": false,
          "selection": [
            {
              "v": {
                "v": true,
                "l": "true"
              }
            }
          ],
          "selectBlank": false,
          "selectError": false
        }
      ],
      "mode": "row-based"
    },
    "columnName": "page",
    "expression": "grel:value.rpartition(\"pages\")[0].rpartition(/\\d+/)[1]",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column page using expression grel:value.rpartition(\"pages\")[0].rpartition(/\\d+/)[1]"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [
        {
          "type": "list",
          "name": "pages",
          "expression": "grel:value.contains(\"pages\")",
          "columnName": "pages",
          "invert": false,
          "omitBlank": false,
          "omitError": false,
          "selection": [
            {
              "v": {
                "v": true,
                "l": "true"
              }
            }
          ],
          "selectBlank": false,
          "selectError": false
        }
      ],
      "mode": "row-based"
    },
    "baseColumnName": "pages",
    "expression": "grel:if (value.contains (\",\"),\nvalue.rpartition(\", \") [0],\nnull\n)",
    "onError": "set-to-blank",
    "newColumnName": "romanNumberedPage",
    "columnInsertIndex": 11,
    "description": "Create column romanNumberedPage at index 11 based on column pages using expression grel:if (value.contains (\",\"),\nvalue.rpartition(\", \") [0],\nnull\n)"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [
        {
          "type": "list",
          "name": "pages",
          "expression": "grel:value.contains(\"lea\")",
          "columnName": "pages",
          "invert": false,
          "omitBlank": false,
          "omitError": false,
          "selection": [
            {
              "v": {
                "v": true,
                "l": "true"
              }
            }
          ],
          "selectBlank": false,
          "selectError": false
        }
      ],
      "mode": "row-based"
    },
    "baseColumnName": "pages",
    "expression": "grel:value",
    "onError": "set-to-blank",
    "newColumnName": "leaf",
    "columnInsertIndex": 11,
    "description": "Create column leaf at index 11 based on column pages using expression grel:value"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [
        {
          "type": "list",
          "name": "pages",
          "expression": "grel:value.contains(\"lea\")",
          "columnName": "pages",
          "invert": false,
          "omitBlank": false,
          "omitError": false,
          "selection": [
            {
              "v": {
                "v": true,
                "l": "true"
              }
            }
          ],
          "selectBlank": false,
          "selectError": false
        }
      ],
      "mode": "row-based"
    },
    "columnName": "leaf",
    "expression": "grel:value.rpartition(\" pages\")[0].rpartition(/\\d+/)[1]",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column leaf using expression grel:value.rpartition(\" pages\")[0].rpartition(/\\d+/)[1]"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [
        {
          "type": "list",
          "name": "pages",
          "expression": "grel:value.contains(\"lea\")",
          "columnName": "pages",
          "invert": false,
          "omitBlank": false,
          "omitError": false,
          "selection": [
            {
              "v": {
                "v": true,
                "l": "true"
              }
            }
          ],
          "selectBlank": false,
          "selectError": false
        }
      ],
      "mode": "row-based"
    },
    "baseColumnName": "pages",
    "expression": "grel:if (value.contains (\",\"),\nvalue.rpartition(\", \") [0], null )",
    "onError": "set-to-blank",
    "newColumnName": "romanNumberedLeaf",
    "columnInsertIndex": 11,
    "description": "Create column romanNumberedLeaf at index 11 based on column pages using expression grel:if (value.contains (\",\"),\nvalue.rpartition(\", \") [0], null )"
  },
  {
    "op": "core/column-removal",
    "columnName": "pages",
    "description": "Remove column pages"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [
        {
          "type": "list",
          "name": "pages",
          "expression": "grel:value.contains(\"lea\")",
          "columnName": "pages",
          "invert": false,
          "omitBlank": false,
          "omitError": false,
          "selection": [
            {
              "v": {
                "v": true,
                "l": "true"
              }
            }
          ],
          "selectBlank": false,
          "selectError": false
        }
      ],
      "mode": "row-based"
    },
    "columnName": "romanNumberedLeaf",
    "expression": "clojure:(defn ro2ar [r]\n(->> (reverse (.toUpperCase r)) (map {\\M 1000 \\D 500 \\C 100 \\L 50 \\X 10 \\V 5 \\I 1}) (partition-by identity) (map (partial apply +)) (reduce #(if (< %1 %2) (+ %1 %2) (- %1 %2))))) (ro2ar value)",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column romanNumberedLeaf using expression clojure:(defn ro2ar [r]\n(->> (reverse (.toUpperCase r)) (map {\\M 1000 \\D 500 \\C 100 \\L 50 \\X 10 \\V 5 \\I 1}) (partition-by identity) (map (partial apply +)) (reduce #(if (< %1 %2) (+ %1 %2) (- %1 %2))))) (ro2ar value)"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [
        {
          "type": "list",
          "name": "pages",
          "expression": "grel:value.contains(\"lea\")",
          "columnName": "pages",
          "invert": false,
          "omitBlank": false,
          "omitError": false,
          "selection": [
            {
              "v": {
                "v": true,
                "l": "true"
              }
            }
          ],
          "selectBlank": false,
          "selectError": false
        }
      ],
      "mode": "row-based"
    },
    "columnName": "romanNumberedPage",
    "expression": "clojure:(defn ro2ar [r]\n(->> (reverse (.toUpperCase r)) (map {\\M 1000 \\D 500 \\C 100 \\L 50 \\X 10 \\V 5 \\I 1}) (partition-by identity) (map (partial apply +)) (reduce #(if (< %1 %2) (+ %1 %2) (- %1 %2))))) (ro2ar value)",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column romanNumberedPage using expression clojure:(defn ro2ar [r]\n(->> (reverse (.toUpperCase r)) (map {\\M 1000 \\D 500 \\C 100 \\L 50 \\X 10 \\V 5 \\I 1}) (partition-by identity) (map (partial apply +)) (reduce #(if (< %1 %2) (+ %1 %2) (- %1 %2))))) (ro2ar value)"
  }
]